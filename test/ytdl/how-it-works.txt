great, I want to remake the youtube streamer in C using libcurl because I'm
crazy
the youtube-dl team has done a great job, but honestly it does too much and I'm
really only looking for something to get me a direct stream of the youtube video

so the big question that for some reason is really hard to find the answer to
(my guess is because google doesn't want you to know, and if google doesn't want
you to know something they can make it really fucking difficult) is how does
this monstrosity of a python program actually work?

NOTE: ie stands for info extractor
NOTE: look in /extractor/youtube.py

def download(self, url_list):
    """Download a given list of URLs."""
    ...

    for url in url_list:
        try:
            # It also downlaods the videos
            res = self.extract_info(
                url, force_generic_extractor=self.params.get('force_generic_extractor', False))
            except UnavailableVideoError:
                ...
            except MaxDownloadsReached:
                ...
            else:
                if self.params.get('dump_single_json', False):
                    self.to_stdout(json.dumps(res))

    return self._download_retcode
                

def extract_info(self, url, download=True, ie_key=None, extra_info={},
                 process=True, force_generic_extractor=False):
    '''
    Returns a list with a dictionary for each video we find.
    If 'download', also downloads the videos.
    extra_info is a dict containing extra values to add to each result
    '''

    if not ie_key and force_generic_extractor:
        ie_key = 'Generic'

    if ie_key:
        ies = [self.get_info_extractor(ie_key)]
    else:
        ies = self._ies

    for ie in ies:
        if not ie.suitable(url):
            continue

        ie = self.get_info_extractor(ie.ie_key())
        if not ie.working():
            ...

        try:
            ie_result = ie_extract(url)
            if ie_result is None: #Finished already (backwards compatibility; listformats and friends should be moved here)
                break
            if isinstance(ie_result, list):
                # Backwards compatibility: old IE result format
                ie_result = {
                    '_type': 'compat_list',
                    'entires': ie_result,
                }
            self.add_default_extra_info(ie_result, ie, url)
            if process:
                return self.process_ie_result(ie_result, download, extra_info)
            else:
                return ie_result
        except ExtractorError as e: # An error we somewhat expected
            ...
    else:
        self.report_error('no suitable InfoExtractor for URL %s' % url)


def process_ie_result(self, ie_result, download=True, extra_info={}):
    """
    Take the result of the ie(may be modified) and resolve all unresolved 
    references (URLs, playlist items).

    It will also download the videos if 'download'.
    Returns the resolved ie_result.
    """
    result_type = ie_result.get('_type', 'video')

    if result_type in ('url', 'url_transparent'):
        ie_result['url'] = sanitize_url(ie_result['url'])
        extract_flat = self.params.get('xtract_flat', False)
        if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or
                extract_flat is True):
            if self.params.get('forcejson', False):
                self.to_stdout(ie_result))
            return ie_result

        if result_type == 'video':
            self.add_extra_info(ie_result,, extra_info)
            return self.process_video_result(ie_result, download=download)
        elif result_type == 'url':
            # We have to add extra_info to the results because it may be
            # contained in a playlist
            return self.extract_info(ie_result['url'],
                                     download,
                                     ie_key=ie_result.get('ie_key'),
                                     extra_info=extra_info)
